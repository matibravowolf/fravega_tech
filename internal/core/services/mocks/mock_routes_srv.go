// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/services/routes_srv.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/uMakeMeCrazy/fravega_tech/internal/core/domain"
)

// MockRoutesRepo is a mock of RoutesRepo interface.
type MockRoutesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesRepoMockRecorder
}

// MockRoutesRepoMockRecorder is the mock recorder for MockRoutesRepo.
type MockRoutesRepoMockRecorder struct {
	mock *MockRoutesRepo
}

// NewMockRoutesRepo creates a new mock instance.
func NewMockRoutesRepo(ctrl *gomock.Controller) *MockRoutesRepo {
	mock := &MockRoutesRepo{ctrl: ctrl}
	mock.recorder = &MockRoutesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutesRepo) EXPECT() *MockRoutesRepoMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockRoutesRepo) FindByID(ctx context.Context, routeID string) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, routeID)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRoutesRepoMockRecorder) FindByID(ctx, routeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRoutesRepo)(nil).FindByID), ctx, routeID)
}

// Save mocks base method.
func (m *MockRoutesRepo) Save(ctx context.Context, route *domain.Route) (*domain.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, route)
	ret0, _ := ret[0].(*domain.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRoutesRepoMockRecorder) Save(ctx, route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRoutesRepo)(nil).Save), ctx, route)
}

// MockPurchasesRepo is a mock of PurchasesRepo interface.
type MockPurchasesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPurchasesRepoMockRecorder
}

// MockPurchasesRepoMockRecorder is the mock recorder for MockPurchasesRepo.
type MockPurchasesRepoMockRecorder struct {
	mock *MockPurchasesRepo
}

// NewMockPurchasesRepo creates a new mock instance.
func NewMockPurchasesRepo(ctrl *gomock.Controller) *MockPurchasesRepo {
	mock := &MockPurchasesRepo{ctrl: ctrl}
	mock.recorder = &MockPurchasesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPurchasesRepo) EXPECT() *MockPurchasesRepoMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockPurchasesRepo) FindByID(ctx context.Context, purchaseID string) (*domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, purchaseID)
	ret0, _ := ret[0].(*domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPurchasesRepoMockRecorder) FindByID(ctx, purchaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPurchasesRepo)(nil).FindByID), ctx, purchaseID)
}

// SendEmailNotification mocks base method.
func (m *MockPurchasesRepo) SendEmailNotification(ctx context.Context, purchaseID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailNotification", ctx, purchaseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailNotification indicates an expected call of SendEmailNotification.
func (mr *MockPurchasesRepoMockRecorder) SendEmailNotification(ctx, purchaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailNotification", reflect.TypeOf((*MockPurchasesRepo)(nil).SendEmailNotification), ctx, purchaseID)
}
